<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<schema name="Rock and Roll Hall of Fame - Catalog Solr Schema" version="1.5">

  <types>

    <fieldType name="string"  class="solr.StrField"  sortMissingLast="true" />
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" />
    
    <fieldtype name="binary"  class="solr.BinaryField" />

    <fieldType name="int"    class="solr.TrieIntField"    precisionStep="0"  positionIncrementGap="0" />
    <fieldType name="float"  class="solr.TrieFloatField"  precisionStep="0"  positionIncrementGap="0" />
    <fieldType name="long"   class="solr.TrieLongField"   precisionStep="0"  positionIncrementGap="0" />
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0"  positionIncrementGap="0" />

    <fieldType name="tint"    class="solr.TrieIntField"    precisionStep="8"  positionIncrementGap="0" />
    <fieldType name="tfloat"  class="solr.TrieFloatField"  precisionStep="8"  positionIncrementGap="0" />
    <fieldType name="tlong"   class="solr.TrieLongField"   precisionStep="8"  positionIncrementGap="0" />
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8"  positionIncrementGap="0" />

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day

         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField"  precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField"  precisionStep="6" positionIncrementGap="0"/>


    <!--
      Note:
      These should only be used for compatibility with existing indexes (created with older Solr versions)
      or if "sortMissingFirst" or "sortMissingLast" functionality is needed. Use Trie based fields instead.

      Plain numeric field types that store and index the text
      value verbatim (and hence don't support range queries, since the
      lexicographic ordering isn't equal to the numeric ordering)
    -->
    <fieldType name="pint"    class="solr.IntField"    />
    <fieldType name="plong"   class="solr.LongField"   />
    <fieldType name="pfloat"  class="solr.FloatField"  />
    <fieldType name="pdouble" class="solr.DoubleField" />
    <fieldType name="pdate"   class="solr.DateField" sortMissingLast="true" />


    <!--
      Note:
      These should only be used for compatibility with existing indexes (created with older Solr versions).
      Use Trie based fields instead. As of Solr 3.5 and 4.x, Trie based fields support sortMissingFirst/Last

      Numeric field types that manipulate the value into
      a string value that isn't human-readable in its internal form,
      but with a lexicographic ordering the same as the numeric ordering,
      so that range queries work correctly.
    -->
    <fieldType name="sint"    class="solr.SortableIntField"    sortMissingLast="true" />
    <fieldType name="slong"   class="solr.SortableLongField"   sortMissingLast="true" />
    <fieldType name="sfloat"  class="solr.SortableFloatField"  sortMissingLast="true" />
    <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" />


    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting
         purposes.  The ordering is generated based on the field name
         and the version of the index, As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the name
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true" />

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->
     <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
       <analyzer>
         <tokenizer class="solr.StandardTokenizerFactory"/>
         <filter class="solr.ICUFoldingFilterFactory" />
         <!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" /> -->
         <filter class="solr.SnowballPorterFilterFactory" language="English" />
       </analyzer>
     </fieldType>

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
         removes stop words from case-insensitive "stopwords.txt"
         (empty by default), and down cases.  At query time only, it
         also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" /> -->
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" /> -->
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
         -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
        -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English, plus
   aggressive word-splitting and autophrase features enabled.
   This field is just like text_en, except it adds
   WordDelimiterFilter to enable splitting and matching of
   words on case-change, alpha numeric boundaries, and
   non-alphanumeric chars.  This means certain compound word
   cases will work, for example query "wi fi" will match
   document "WiFi" or "wi-fi".  However, other cases will still
   not match, for example if the query is "wifi" and the
   document is "wi fi" or if the query is "wi-fi" and the
   document is "wifi".
        -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_en.txt"/> -->
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Just like text_general except it reverses the characters of
   each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" /> -->
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" /> -->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/> -->
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" >
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string,
             which may include back references to portions of the original
             string matched by the pattern.

             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.

             http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html
          -->
        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>

    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!--
        The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
        a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
        Attributes of the DelimitedPayloadTokenFilterFactory :
         "delimiter" - a one character delimiter. Default is | (pipe)
   "encoder" - how to encode the following value into a playload
      float -> org.apache.lucene.analysis.payloads.FloatEncoder,
      integer -> o.a.l.a.p.IntegerEncoder
      identity -> o.a.l.a.p.IdentityEncoder
            Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
         -->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldtype>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="text_path" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.PathHierarchyTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

    <!--
      A Geohash is a compact representation of a latitude longitude pair in a single field.
      See http://wiki.apache.org/solr/SpatialSearch
    -->
    <fieldtype name="geohash" class="solr.GeoHashField"/>
  </types>


  <fields>

    <!-- NOTE: this is not a full list of fields in the index; dynamic fields are also used -->
    <field name="id" type="string" indexed="true" stored="true" required="true" />
    <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
    <!-- default, catch all search field -->
    <field name="text" type="text" indexed="true" stored="false" multiValued="true"/>
 
    <!-- these display fields are NOT multi-valued -->
    <field name="marc_display"          type="string" indexed="false" stored="true" multiValued="false" />
    <field name="heading_display"       type="string" indexed="false" stored="true" multiValued="false" />
    <field name="title_display"         type="text"   indexed="false" stored="true" multiValued="false" />
    <field name="title_vern_display"    type="text"   indexed="false" stored="true" multiValued="false" />
    <field name="subtitle_display"      type="text"   indexed="false" stored="true" multiValued="false" />
    <field name="subtitle_vern_display" type="text"   indexed="false" stored="true" multiValued="false" />
    <field name="author_display"        type="text"   indexed="false" stored="true" multiValued="false" />
    <field name="author_vern_display"   type="text"   indexed="false" stored="true" multiValued="false" />
 
    <!-- by default, facet fields are not stored, so they may be display differenty than the are
         indexed.  Here are the exceptions to this, which are facet fields that are displayed the
         same as they are indexed -->
    <field name="subject_facet"    type="string" indexed="true" stored="true" multiValued="true"  />
    <field name="pub_date"         type="string" indexed="true" stored="true" multiValued="true"  />
    <field name="genre_facet"      type="string" indexed="true" stored="true" multiValued="true"  />
    <field name="collection_facet" type="string" indexed="true" stored="true" multiValued="true"  />
    
    <!-- pub_date_sort uses new trie-based int fields, which are recommended for any int and are 
         displayable, sortable, and can be used in range queries.  
         Use 'tint' for faster range-queries. -->
    <field name="pub_date_sort" type="tint" indexed="true" stored="true" multiValued="false"/>

    <!-- format is used for facet, display, and choosing which partial to use for the show view, 
         so it must be stored and indexed -->
    <field name="format" type="string" indexed="true" stored="true"/>

    <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
         will be used if the name matches any of the patterns.
         RESTRICTION: the glob-like pattern in the name attribute must have
         a "*" only at the start or the end.
         EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
         Longer patterns will be matched first.  if equal size patterns
         both match, the first appearing in the schema will be used.  -->
    <dynamicField name="*_i"             type="int"           indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="*_s"             type="string"        indexed="true"  stored="true"  multiValued="true"  />
    <dynamicField name="*_id"            type="string"        indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="*_l"             type="long"          indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="*_t"             type="text"          indexed="true"  stored="false" multiValued="true"  />
    <dynamicField name="*_txt"           type="text_general"  indexed="true"  stored="true"  multiValued="true"  />
    <dynamicField name="*_b"             type="boolean"       indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="*_f"             type="float"         indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="*_d"             type="double"        indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="*_display"       type="text"          indexed="false" stored="true"  multiValued="true"  />
    <dynamicField name="*_label"         type="string"        indexed="false" stored="true"  multiValued="true"  />
    <dynamicField name="*_facet"         type="string"        indexed="true"  stored="false" multiValued="true"  />
    <dynamicField name="*_sort"          type="alphaOnlySort" indexed="true"  stored="false" multiValued="false" />
    <dynamicField name="*_unstem_search" type="text_general"  indexed="true"  stored="false" multiValued="true"  />
    <dynamicField name="*spell"          type="textSpell"     indexed="true"  stored="false" multiValued="true"  />
    <dynamicField name="*_dt"            type="date"          indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="*_p"             type="location"      indexed="true"  stored="true"  multiValued="false" />

    <!-- Type used to index the lat and lon components for the "location" FieldType -->
    <dynamicField name="*_coordinate"  type="tdouble" indexed="true"  stored="false"/>

    <!-- some trie-coded dynamic fields for faster range queries -->
    <dynamicField name="*_ti"  type="tint"    indexed="true"  stored="true"/>
    <dynamicField name="*_tl"  type="tlong"   indexed="true"  stored="true"/>
    <dynamicField name="*_tf"  type="tfloat"  indexed="true"  stored="true"/>
    <dynamicField name="*_td"  type="tdouble" indexed="true"  stored="true"/>
    <dynamicField name="*_tdt" type="tdate"   indexed="true"  stored="true"/>
    <dynamicField name="*_pi"  type="pint"    indexed="true"  stored="true"/>

    <!-- Miscellaneous fields -->
    <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
    <dynamicField name="attr_*"    type="text_general" indexed="true" stored="true" multiValued="true"/>
    <dynamicField name="random_*"  type="random" />

    <!-- uncomment the following to ignore any fields that don't already match an existing
         field name or dynamic field, rather than reporting them as an error.
         alternately, change the type="ignored" to some other type e.g. "text" if you want
         unknown fields indexed and/or stored by default -->
    <!-- dynamicField name="*" type="ignored" multiValued="true" /-->
  </fields>

  <!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field -->
  <uniqueKey>id</uniqueKey>

  <!-- field for the QueryParser to use when an explicit fieldname is absent -->
  <defaultSearchField>text</defaultSearchField>

  <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
  <solrQueryParser defaultOperator="OR"/>

  <!-- copyField commands copy one field to another at the time a document
       is added to the index.  It's used either to index the same field differently,
       or to add multiple fields to the same field for easier/faster searching.  -->
  <!-- Copy Fields -->

  <!-- unstemmed fields -->
  <copyField source="title_t"             dest="title_unstem_search"/>
  <copyField source="subtitle_t"          dest="subtitle_unstem_search"/>
  <copyField source="title_addl_t"        dest="title_addl_unstem_search"/>
  <copyField source="title_added_entry_t" dest="title_added_entry_unstem_search"/>
  <copyField source="title_series_t"      dest="title_series_unstem_search"/>
  <copyField source="author_t"            dest="author_unstem_search"/>
  <copyField source="author_addl_t"       dest="author_addl_unstem_search"/>
  <copyField source="subject_t"           dest="subject_unstem_search"/>
  <copyField source="subject_facet"       dest="subject_unstem_search"/>
  <copyField source="contributors_t"      dest="contributors_unstem_search"/>
  <copyField source="lc_callnum_display"  dest="lc_callnum_unstem_search"/>
  
  <!-- display fields that are copied to the text field for searching -->
  <copyField source="isbn_display"        dest="text"/>

  <!-- sort fields -->
  <copyField source="pub_date" dest="pub_date_sort"/>

  <!-- spellcheck fields -->
  <!-- default spell check;  should match fields for default request handler -->
  <!-- it won't work with a copy of a copy field -->
  <copyField source="*_t"     dest="spell" />
  <copyField source="*_facet" dest="spell" />
  <!-- title spell check;  should match fields for title request handler -->
  <copyField source="title_t"             dest="title_spell" />
  <copyField source="subtitle_t"          dest="title_spell" />
  <copyField source="addl_titles_t"       dest="title_spell" />
  <copyField source="title_added_entry_t" dest="title_spell" />
  <copyField source="title_series_t"      dest="title_spell" />
  <!-- author spell check; should match fields for author request handler -->
  <copyField source="author_t"      dest="name_spell" />
  <copyField source="author_addl_t" dest="name_spell" />
  <!-- subject spell check; should match fields for subject request handler -->
  <copyField source="subject_facet" dest="subject_spell" />
  <copyField source="subject_t"     dest="subject_spell" />
  <!-- contributor and genre spell check -->
  <copyField source="contributors_t" dest="name_spell"  />
  <copyField source="genre_t"        dest="genre_spell" />

  <!-- OpenSearch query field should match request handler search fields -->
  <copyField source="title_t"             dest="opensearch_display" />
  <copyField source="subtitle_t"          dest="opensearch_display" />
  <copyField source="addl_titles_t"       dest="opensearch_display" />
  <copyField source="title_added_entry_t" dest="opensearch_display" />
  <copyField source="title_series_t"      dest="opensearch_display" />
  <copyField source="author_t"            dest="opensearch_display" />
  <copyField source="author_addl_t"       dest="opensearch_display" />
  <copyField source="subject_facet"       dest="opensearch_display" />
  <copyField source="subject_t"           dest="opensearch_display" />

  <!-- Above, multiple source fields are copied to the [text] field.
       Another way to map multiple source fields to the same
       destination field is to use the dynamic field syntax.
       copyField also supports a maxChars to copy setting.  -->

  <!-- <copyField source="*_t" dest="text" maxChars="3000"/> -->

  <!-- copy name to alphaNameSort, a field designed for sorting by name -->
  <!-- <copyField source="name" dest="alphaNameSort"/> -->


  <!-- Similarity is the scoring routine for each document vs. a query.
       A custom similarity may be specified here, but the default is fine
       for most applications.  -->
  <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
  <!-- ... OR ...
       Specify a SimilarityFactory class name implementation
       allowing parameters to be used.
  -->
  <!--
  <similarity class="com.example.solr.CustomSimilarityFactory">
    <str name="paramkey">param value</str>
  </similarity>
  -->
</schema>
